name: Perception Layer - Research Quality Analysis
on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:  # Allow manual triggering
  push:
    paths:
      - '**.typ'
      - '**.bib'
      - 'abdal-research-website/lib/monitoring/**'

jobs:
  analyze-research-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: abdal-research-website/package-lock.json

      - name: Install dependencies
        run: |
          cd abdal-research-website
          npm ci

      - name: Run Research Quality Analyzer
        run: |
          cd abdal-research-website
          npx tsx lib/monitoring/run-research-analyzer.ts || true
          # Continue even if critical gaps found (for artifact upload)

      - name: Run Analytics Collector
        run: |
          cd abdal-research-website
          npx tsx lib/monitoring/run-analytics-collector.ts || true

      - name: Run Code Health Monitor
        run: |
          cd abdal-research-website
          npx tsx lib/monitoring/run-code-health.ts || true

      - name: Upload Perception Data
        uses: actions/upload-artifact@v3
        with:
          name: perception-data-${{ github.run_number }}
          path: .ai-insights/
          retention-days: 30

      - name: Comment on commit with summary
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Load all perception data
            const gapsData = JSON.parse(fs.readFileSync('.ai-insights/research-gaps.json', 'utf8'));
            const analyticsData = JSON.parse(fs.readFileSync('.ai-insights/user-behavior.json', 'utf8'));
            const codeHealthData = JSON.parse(fs.readFileSync('.ai-insights/code-health.json', 'utf8'));

            let comment = `## 🔍 Perception Layer Analysis\n\n`;

            // Research Quality
            comment += `### 📚 Research Quality\n`;
            comment += `**Total gaps:** ${gapsData.summary.total}\n`;
            comment += `- 🔴 Critical: ${gapsData.summary.by_severity.critical}\n`;
            comment += `- 🟠 High: ${gapsData.summary.by_severity.high}\n`;
            comment += `- 🟡 Medium: ${gapsData.summary.by_severity.medium}\n\n`;

            // User Behavior
            comment += `### 👥 User Behavior\n`;
            comment += `**Sections analyzed:** ${analyticsData.summary.total_sections}\n`;
            comment += `**Content gaps:** ${analyticsData.summary.content_gaps_identified}\n`;
            comment += `**Top confusion:** "${analyticsData.chat_confusion_patterns[0]?.query}" (${analyticsData.chat_confusion_patterns[0]?.frequency}x)\n\n`;

            // Code Health
            comment += `### 💻 Code Health\n`;
            comment += `**Bundle size:** ${(codeHealthData.bundle_analysis.main_bundle_size / 1000).toFixed(0)}KB / ${(codeHealthData.bundle_analysis.threshold / 1000).toFixed(0)}KB\n`;
            comment += `**Cache efficiency:** ${(codeHealthData.cache_performance.cache_efficiency_score * 100).toFixed(0)}%\n`;
            comment += `**Cost savings:** $${codeHealthData.cache_performance.cost_savings_monthly}/month\n\n`;

            comment += `📊 Full reports available in workflow artifacts`;

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: comment
            });

      - name: Create issue for critical gaps
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const gapsData = JSON.parse(fs.readFileSync('.ai-insights/research-gaps.json', 'utf8'));

            const criticalGaps = gapsData.gaps.filter(g => g.severity === 'critical');
            const highGaps = gapsData.gaps.filter(g => g.severity === 'high');

            if (criticalGaps.length > 0 || highGaps.length > 5) {
              let body = `# Research Quality Alert\n\n`;
              body += `Automated analysis found **${criticalGaps.length} critical** and **${highGaps.length} high-priority** gaps.\n\n`;

              if (criticalGaps.length > 0) {
                body += `## 🔴 Critical Gaps (Immediate Action Required)\n\n`;
                criticalGaps.forEach(gap => {
                  body += `- **${gap.file.split('/').pop()}:${gap.line}** - ${gap.type}\n`;
                  body += `  - Context: ${gap.context.slice(0, 100)}...\n`;
                  body += `  - Action: ${gap.suggested_action}\n\n`;
                });
              }

              body += `\n[View full report in workflow artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId})`;

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Research Quality: ${criticalGaps.length} critical, ${highGaps.length} high-priority gaps found`,
                body: body,
                labels: ['research-quality', 'automated']
              });
            }
